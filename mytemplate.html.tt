<!doctype html>
<html>
  <head>
    <title>diskmon</title>
    <meta charset="utf-8">
    <style>
      body {
        background-color: #000;
        color: #777;
      }
      h1 {
        text-align: center;
        border-bottom: 5px solid #55ab55;
      }
      h2 {
        margin: 0;
        display: inline-block;
        border-bottom: 3px solid #232366;
      }
      table {
        font-family: monospace;
        border-collapse: collapse;
      }
      table tr th small {
        font-size: 0.7em;
      }
      table thead th{
        line-height: 0.7em;
        padding-bottom: 3px;
      }
      table thead th small {
        /* col header */
        padding: 0 5px 0px 5px;
      }
      table tbody th small {
        /* row header */
        padding: 0 10px 0 10px;
      }
      table td {
        background-color: #0e0e0e;
        border: 1px solid #222;
        padding: 0;
        width: 75px;
        text-align: center;
      }
      table td.alert {
        background-color: #991010;
        color: #bbb;
        font-weight: bold;
      }
      .thead-limit {
        font-weight: normal;
      }
      .usage-box {
        display: flex;
      }
      .canvas-box {
        /*background-color: #0e0e0e;
        border: 1px solid #222;
        min-width: 220px;
        height: 150px;*/
      }
      canvas {
        /*background-color: #0a0a0a;
        border: 1px solid #222;*/
        background-color: #0e0e0e;
        border: 1px solid #222;
      }
      hr {
        border: 0;
        border-bottom: 1px solid #222;
      }
      .usage-box {
        padding-top: 20px;
        padding-bottom: 10px;
      }
      .status-box {
        padding-bottom: 15px;
      }
      #timestamp {
        position: absolute;
        right: 10px;
        top: 70px;
      }
    </style>
  </head>
  <body>
    <h1>diskmon</h1>
    <small id="timestamp"></small>
    [% FOREACH disk IN data %]
      <p>Disk: <strong>[% disk.name %]</strong></p>

      <h2>usage</h2>
      <div class="usage-box databox">
      [% FOREACH part IN disk.usage.parts %]
        <div class="canvas-box">
          <canvas id="usage-canvas-[% disk.name FILTER remove('\/') %]-[% part.name FILTER remove('\/') %]"
                  width="230" height="165"></canvas>
        </div>
      [% END %]
      </div>

      <h2>status</h2>
      <div class="status-box databox">
        <table>
          <thead>
            <th></th>
            [% FOREACH field IN disk.status.0.fields %]
              <th><small class="thead">[% field.label %]
                <span class="thead-limit">(Limit: [% field.limit %])</span>
              </small></th>
            [% END %]
          </thead>
          <tbody>
          [% FOREACH entry IN disk.status %]
            <tr>
              <th><small>[% entry.date %]</small></th>
              [% FOREACH field IN entry.fields %]
                [% IF field.alert == 'ALERT' %]
                  <td class="alert">&#9888; [% field.value %] &#9888;</td>
                [% ELSIF field.value == 'no data found' %]
                  <td>-</td>
                [% ELSE %]
                  <td>[% field.value %]</td>
                [% END %]
              [% END %]
            </tr>
          [% END %]
          </tbody>
        </table>
      </div>
      <hr>
    [% END %]
    <script>
    const data_json = '[% data_json %]';
    const data = JSON.parse(data_json);
    //console.log(data);

    function draw_usage(canv_id, part, dates) {

      const canvas = document.getElementById(canv_id);
      if (canvas.getContext) {
        const ctx = canvas.getContext('2d');

        // draw graph box
        const gbox_sx = 15;
        const gbox_sy = 35;
        const gbox_width = 200;
        const gbox_height = 110;

        ctx.fillStyle = '#0a0a0a';
        ctx.fillRect(gbox_sx, gbox_sy, gbox_width, gbox_height);


        // draw some grid
        // horizontal lines
        const v_parts = 4;
        const dy = gbox_height / v_parts;

        ctx.strokeStyle = '#333';
        ctx.lineWidth = 1;
        ctx.setLineDash([5, 3]);
        ctx.beginPath();
        for (let i = 1; i < v_parts; i++) {
          ctx.moveTo(gbox_sx, gbox_sy + dy*i);
          ctx.lineTo(gbox_sx + gbox_width, gbox_sy + dy*i);
        }
        ctx.stroke();

        // horizontal markers
        const h_parts = 7;
        const dx = gbox_width / h_parts;

        ctx.setLineDash([]);
        ctx.beginPath();
        for (let i = 0; i < h_parts + 1; i++) {
          ctx.moveTo(gbox_sx + dx*i, gbox_height + gbox_sy);
          ctx.lineTo(gbox_sx + dx*i, gbox_height + gbox_sy - 5);
        }
        // axis y and x
        ctx.lineWidth = 1;
        ctx.moveTo(gbox_sx, gbox_height + gbox_sy);
        ctx.lineTo(gbox_sx + gbox_width, gbox_height + gbox_sy);
        ctx.moveTo(gbox_sx, gbox_sy);
        ctx.lineTo(gbox_sx, gbox_sy + gbox_height);
        ctx.stroke();

        // draw the graph
        const sizes = part.size.reverse().slice(0, h_parts + 1);
        const usages = part.usage.reverse().slice(0, h_parts + 1);
        const color = part.color;

        ctx.strokeStyle = color;
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(gbox_sx + gbox_width, gbox_sy + gbox_height);
        let last_sx = 0;
        for (let i = 0; i < sizes.length; i++) {
          const size = sizes[i];
          const usage = usages[i];
          const fac_used = usage / size;
          //console.log(fac_used);
          const usage_height = gbox_height * fac_used;

          last_sx = gbox_sx + gbox_width - dx*i;
          ctx.lineTo(
            last_sx,
            gbox_sy + gbox_height - usage_height
          );
        }
        ctx.lineTo(last_sx, gbox_sy + gbox_height);
        ctx.fillStyle = color + '11';
        ctx.fill();
        ctx.stroke();
        // colored bottom line
        ctx.beginPath()
        ctx.lineWidth = 1;
        ctx.moveTo(last_sx, gbox_sy + gbox_height);
        ctx.lineTo(gbox_sx + gbox_width, gbox_sy + gbox_height);
        ctx.stroke();

        // labels
        ctx.fillStyle = '#777';
        ctx.font = '13px monospace';
        ctx.fillText("Part.: " + part.name, 70, 15);
        ctx.fillText(part.name, 125, 15)
        // (rotate y-axis label)
        ctx.save();
        ctx.translate(10, gbox_sy + 75);
        ctx.rotate( -Math.PI / 2 );
        ctx.fillText("usage", 0, 0);
        ctx.restore()
        //
        ctx.fillText(
          "t",
          gbox_sx + gbox_width/2 - 5,
          gbox_sy + gbox_height + 13
        );
        // sizes
        const usage_gib = Math.round(part.usage[0] / (1024 * 1024) * 10) / 10;
        const size_gib = Math.round(part.size[0] / (1024 * 1024) * 10) / 10;
        ctx.fillText(
          "(" + usage_gib + "G/" + size_gib + "G)",
          55,
          30
        );
      }
    }

    for (const dev of data) {
      const dev_id = dev.name.replace(/\//g, '');
      const canv_base_id = 'usage-canvas-' + dev_id;
      //console.log(canv_base_id);
      //console.log(dev.usage);
      for (const part of dev.usage.parts) {
        const part_id = part.name.replace(/\//g, '');
        const canv_id = canv_base_id + '-' + part_id;
        //console.log(canv_id);
        draw_usage(canv_id, part, dev.usage.dates);
      }
    }
    const timest_el = document.getElementById('timestamp');
    const date = new Date();
    timest_el.textContent = date.toLocaleString();
    </script>
  </body>
</html>
